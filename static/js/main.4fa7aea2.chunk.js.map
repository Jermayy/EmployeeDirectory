{"version":3,"sources":["components/Header.js","components/SearchBar.js","components/Table.js","App.js","index.js"],"names":["Header","className","SearchBar","props","value","searchValue","name","onChange","onInput","type","placeholder","Table","employees","React","useState","sortConfig","setSortConfig","sortedSampleEmployees","useMemo","sortableEmployees","sort","a","b","key","direction","requestSort","useSortableData","getClassNamesFor","undefined","scope","onClick","map","employee","id","firstName","lastName","department","email","App","sampleEmployees","employeeResults","setSearchValue","searchResults","filter","result","searchfirstName","toLowerCase","includes","searchlastName","searchDepartment","searchEmail","event","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fa7aea2.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header(){\n\n return(\n   \n\n <div className=\"jumbotron jumbotron-fluid\">\n  <div className=\"container\">\n    <h1 className=\"display-4\">Employee Directory</h1>\n    <p className=\"lead\">Search your employee database below:</p>\n  </div>\n</div>\n )   \n}\n\nexport default Header;","import React from \"react\";\n\nfunction SearchBar(props) {\n \n\n      return (\n      \n    <div>\n        <form className=\"form\">\n          <input\n            value={props.searchValue}\n            name=\"searchValue\"\n            onChange={props.onInput}\n            type=\"text\"\n            placeholder=\"Search Employees\"\n          />\n         \n        </form>\n\n        </div>\n        \n\n     \n    );\n      }\n\n\nexport default SearchBar;\n","import React from 'react';\n\n\nconst useSortableData = (employees, config = null)=>{\n    const [sortConfig, setSortConfig] = React.useState(null);\n\n    const sortedSampleEmployees = React.useMemo(() =>{\n        let sortableEmployees = [...employees];\n        if (sortConfig !== null) {\n            sortableEmployees.sort((a,b) => {\n                if (a[sortConfig.key]<b[sortConfig.key]){\n                    return sortConfig.direction === 'ascending'? -1 : 1;\n                }\n                if (a[sortConfig.key]>b[sortConfig.key]){\n                    return sortConfig.direction === 'ascending'? 1 : -1;\n            }\n            return 0;\n        });\n        }\n    \n        return sortableEmployees;\n    }, [employees, sortConfig]);\n\n    const requestSort = key => {\n        let direction = 'ascending';\n        if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending'){\n            direction = 'descending';\n        }\n        setSortConfig({key, direction});\n    }\n\n    return {employees: sortedSampleEmployees, requestSort, sortConfig};\n};\n\n\n  const Table = props =>{     \n\n    const { employees, requestSort, sortConfig } = useSortableData(props.employees);\n    const getClassNamesFor = (name) => {\n      if (!sortConfig) {\n        return;\n      }\n      return sortConfig.key === name ? sortConfig.direction : undefined;\n    };\n\n\n\n\nreturn (\n<div>\n    <table className=\"table\">\n  <thead className=\"thead-dark\">\n    <tr>\n      < th scope=\"col\"> <button className=\"btn\" onClick={() => requestSort('id')} className={getClassNamesFor('id')}> Employee ID </button></th>\n      <th scope=\"col\"> <button className=\"btn\" onClick={() => requestSort('firstName')} className={getClassNamesFor('firstName')}>First Name </button></th>\n      <th scope=\"col\"> <button className=\"btn\" onClick={() => requestSort('lastName')} className={getClassNamesFor('lastName')}>Last Name </button> </th>\n      <th scope=\"col\"> <button className=\"btn\" onClick={() => requestSort('department')}className={getClassNamesFor('department')}>Department </button></th>\n      <th scope=\"col\"> <button className=\"btn\" onClick={() => requestSort('email')} className={getClassNamesFor('email')}>Email </button></th>\n    </tr>\n  </thead>\n  <tbody>\n\n  {employees.map(employee =>{\n      return(\n      \n      <tr key={employee.id}>\n\n        <td>{employee.id}</td>\n        <td>{employee.firstName}</td>\n        <td>{employee.lastName}</td>\n        <td>{employee.department}</td>\n        <td>{employee.email} </td>\n     \n        </tr>  \n        )\n   \n      })}      \n   \n    \n  </tbody>\n</table>\n</div>\n)\n}\n\n\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport SearchBar from './components/SearchBar';\nimport Table from './components/Table';\nimport sampleEmployees from './sampleEmployees.json';\n\n\nfunction App(){\n \n \n  \nconst [employeeResults] = React.useState(sampleEmployees);\nconst [searchValue, setSearchValue] = React.useState('');\n\nconst handleSearch = event => {\n  setSearchValue(event.target.value);\n}\n\n\nconst searchResults = employeeResults.filter(result =>{\n  const searchfirstName = result.firstName.toLowerCase().includes(searchValue.toLowerCase());\n  const searchlastName = result.lastName.toLowerCase().includes(searchValue.toLowerCase());\n  const searchDepartment = result.department.toLowerCase().includes(searchValue.toLowerCase());\n  const searchEmail = result.email.toLowerCase().includes(searchValue.toLowerCase());\n  \n  return searchfirstName || searchlastName || searchDepartment || searchEmail;\n})\n\n  return(\n    <div>\n<Header/>\n<SearchBar onInput={handleSearch}  />\n\n<Table employees= {searchResults}  />\n\n\n</div>\n\n)\n    \n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Bootstrap from'bootstrap/dist/css/bootstrap.min.css';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}